[0,2.05] time;
[-50.0,88.469] x1;
[-50.0,77.765] x2;
[-4.689,5.942] theta;
[0,2.05] clock;

// flying_straight_obs0
{
	 mode 1;
	 invt:
		 (clock < 1.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = 0;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @4(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @7(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));

		 (and (clock > 1.0 - 0.05) (clock < 1.0 + 0.05) ((x1 - 21.347)^2 + (x2 - 10.751)^2 < 400)) ==> @2(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
// flying_straight_obs1
{
	 mode 2;
	 invt:
		 (clock < 2.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = 0;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @5(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @8(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));

		 (and (clock > 2.0 - 0.05) (clock < 2.0 + 0.05) ((x1 - 38.328)^2 + (x2 - 27.572)^2 < 400)) ==> @3(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
// flying_straight_obs2
{
	 mode 3;
	 invt:
		 (clock < 2.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = 0;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @6(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @9(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
// adjusting_left_obs0
{
	 mode 4;
	 invt:
		 (clock < 1.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = 0.31415;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @1(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @7(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));

		 (and (clock > 1.0 - 0.05) (clock < 1.0 + 0.05) ((x1 - 21.347)^2 + (x2 - 10.751)^2 < 400)) ==> @5(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
// adjusting_left_obs1
{
	 mode 5;
	 invt:
		 (clock < 2.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = 0.31415;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @2(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @8(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));

		 (and (clock > 2.0 - 0.05) (clock < 2.0 + 0.05) ((x1 - 38.328)^2 + (x2 - 27.572)^2 < 400)) ==> @6(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
// adjusting_left_obs2
{
	 mode 6;
	 invt:
		 (clock < 2.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = 0.31415;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @3(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @9(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
// adjusting_right_obs0
{
	 mode 7;
	 invt:
		 (clock < 1.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = -0.31415;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @4(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @1(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));

		 (and (clock > 1.0 - 0.05) (clock < 1.0 + 0.05) ((x1 - 21.347)^2 + (x2 - 10.751)^2 < 400)) ==> @8(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
// adjusting_right_obs1
{
	 mode 8;
	 invt:
		 (clock < 2.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = -0.31415;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @5(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @2(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));

		 (and (clock > 2.0 - 0.05) (clock < 2.0 + 0.05) ((x1 - 38.328)^2 + (x2 - 27.572)^2 < 400)) ==> @9(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
// adjusting_right_obs2
{
	 mode 9;
	 invt:
		 (clock < 2.0 + 0.05);
	 flow:
		 d/dt[x1] = 24.0 * cos(theta);
		 d/dt[x2] = 24.0 * sin(theta);
		 d/dt[theta] = -0.31415;
		 d/dt[clock] = 1.0;
	 jump:
		 (true) ==> @6(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
		 (true) ==> @3(and (x1' = x1) (x2' = x2) (theta' = theta) (clock' = clock));
}
init:
@1 (and (x1 = 0.0) (x2 = 0.0) (theta = 0.3110167187965426) (clock = 0.0));

goal:
@3 true;
@6 true;
@9 true;
